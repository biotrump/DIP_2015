% DIP Homework Assignment #2
% April 12, 2016
% Name: 蔡維新 Thomas Tsai
% ID %: D04922009
% email: d04922009@ntu.edu.tw, thomas@life100.cc
%###############################################################################%
% PROBLEM 1: EDGE DETECTION
% Implementation: main program for problem 1a sobel edge detection
% M-file name: p1a.m
% Usage: p1a
% Output image:
% Parameters: no
% -------------------------------------------------------------------------------
% subroutine : sobel.m
% -------------------------------------------------------------------------------
% function [EM, BEM]=sobel(image, Thresh, show)
% http://deepeshrawat987.blogspot.tw/2013/04/edge-detection.html
% http://blog.yam.com/chu24688/article/50729404
% @PARAM image uint8 grey image
% @PARAM Thresh=100
%###############################################################################%
% PROBLEM 1: EDGE DETECTION
% Implementation: main program for problem 1b laplacian and LOG edge detection
% M-file name: p1b.m
% Usage: p1b
% Output image: laplacian-*, LOG-*
% Parameters: no
% -------------------------------------------------------------------------------
% subroutine : laplacian.m
% -------------------------------------------------------------------------------
% function [zc_4, zc_8]=laplacian(image, threshold, show)
% laplacian 2nd order edge filter
% @param image input image
% @param threshold for edge detection
% @param show to show the intermediate steps
% @return zc_4	4-neighbors laplacian edge map
% @return zc_8	8-neighbors laplacian edge map
% -------------------------------------------------------------------------------
% subroutine : zerocross.m
% -------------------------------------------------------------------------------
% function zc = zerocross(f, neighbors, threshold)
% Finds the zero crossings of the 2-dimensional function f
%###############################################################################%
% PROBLEM 1: EDGE DETECTION
% Implementation: main program for problem 1b laplacian and LOG edge detection
% M-file name: p1c.m
% Usage: p1c
% Output image: laplacian-*, LOG-*
% Parameters: no
% -------------------------------------------------------------------------------
% subroutine : canny.m
% -------------------------------------------------------------------------------
% Canny Edge Detector
% function [sFinal,thresh] = canny(img, mLow, mHigh, sig)
%###############################################################################%
% PROBLEM 2: GEOMETRICAL MODIFICATION
% Implementation: main program for problem 2a and proble 2b
% M-file name: p2ab.m
% Usage: p2ab
% Output image: sample4-sample5.png, sample4-sample7.png, sample5-sample6.png
% stitching-rectangle-wxh-512x512.png, cropped-wxh-512x512.png stitch-512x512.raw
% Parameters: no
% -------------------------------------------------------------------------------
% subroutine : stitching.m
% -------------------------------------------------------------------------------
% function [sI, corner_a, corner_b, rect_oa, rect_ob] = stitching(Ia, Ib, startc, startr, endc, endr)
% Given 2 images Ia,Ib
% @param Ia image is always at the center of the canvas.
% @param Ib images to stitch to Ia, this acts as a moving window over the
% canvas
% @param startc, startr : the start position of stitching to save time
% @param endc, endr end of moving box to find stitching
% @return sI the stitching image in the canvas
% @return corner_a, corner_b : the left top corner of the image Ia and Ib to stitching
% corner_a, corner_b : (row, col)
% -------------------------------------------------------------------------------
% subroutine : bbox.m
% -------------------------------------------------------------------------------
% function BBox=bbox(O)
% @brrief find a bounding box to contain some object in the canvas
% @param O a canvas with some object inside
% @return BBox bouding box (y0,x0,y1,x1)
% -------------------------------------------------------------------------------
% subroutine : rect_int.m
% -------------------------------------------------------------------------------
% function [rc,o1,o2]=rect_int(r1, r2)
% @brief given r1,r2 rectangles and find the intersection rectangle to the global
% coordination and also the local coordinations to r1 and r2
% @param r1 = [x1 y1 x2 y2]
% @param r2 = [x3 y3 x4 y4]
% and x1 < x2, y1 < y2, x3 < x4, y3 < y4
% @return rc[x5 y5 x6 y6] the intersection rectangle to the glogal coordination
% @return o1  the intersection rectangle to the r1 coordination
% @return o2  the intersection rectangle to the r2 coordination
%###############################################################################%
% PROBLEM 2: GEOMETRICAL MODIFICATION
% Implementation: main program for problem 2a and proble 2b
% M-file name: p2c.m
% Usage: p2c
% Output image: image-warp.png
% Parameters: no
% -------------------------------------------------------------------------------
% subroutine : p2c.m
% -------------------------------------------------------------------------------
%###############################################################################%
% PROBLEM 3: TEXTURE ANALYSIS
% Implementation: main program for problem 3
% M-file name: p3.m
% Usage: p3
% Output image: feature-*.png, f-*.png, t-*.png
% Parameters: no
% -------------------------------------------------------------------------------
% subroutine : Laws_mask.m
% -------------------------------------------------------------------------------
% function [image_out] = Laws_mask(imageG, filter_type, window_size, statistic_type,
% normalization_type, show)
% Laws method texture masks methods
% @params imageG grey level image
% @params filter_type L3S3 or L5S5 mask
% @params statistic_type energy computation
% @params normalization_type
% @return image_out the result after Laws' step1 and step2
% -------------------------------------------------------------------------------
% subroutine : kmeans.m
% -------------------------------------------------------------------------------
% function [label, means] = kmeans(D, init, zebra, cheetah, giraffe)
% @BRIEF Perform k-means clustering.
% Input:
% @PARAM D:    3D matrix M * N * d, d is the dim of feature vector, M * N is the image dimension.
% @PARAM init: k number of clusters or predefined label (1 x n vector) for each pixel
% @RETURN label: cluster map of original image by row x col, M * N
% @RETURN means: trained model structure
% -------------------------------------------------------------------------------
% subroutine : image_energy.m
% -------------------------------------------------------------------------------
% function enery = image_energy(im_in, window_size)
% Sum all the sqaure of every element in M(i,j)
% -------------------------------------------------------------------------------
% subroutine : image_stat_stand_dev.m
% -------------------------------------------------------------------------------
% function stand_dev = image_stat_stand_dev(im_in, window_size)
%
% -------------------------------------------------------------------------------
% subroutine : normalize.m
% -------------------------------------------------------------------------------
% function output_image = normalize(input_image)
% normalize the min to max range to 0.0-1.0
